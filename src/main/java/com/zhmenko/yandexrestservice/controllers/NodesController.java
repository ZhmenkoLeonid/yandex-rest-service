/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zhmenko.yandexrestservice.controllers;

import com.zhmenko.yandexrestservice.model.Error;
import com.zhmenko.yandexrestservice.model.ShopUnit;

import java.util.UUID;

import com.zhmenko.yandexrestservice.services.NodesService;
import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Api(value = "nodes", description = "the nodes API")
@RestController
@RequestMapping("/nodes")
@RequiredArgsConstructor
public class NodesController {
    private final NodesService nodesService;

    /**
     * GET /nodes/{id}
     * Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется.
     *
     * @param id Идентификатор элемента (required)
     * @return Информация об элементе. (status code 200)
     * or Невалидная схема документа или входные данные не верны. (status code 400)
     * or Категория/товар не найден. (status code 404)
     */
    @ApiOperation(value = "", nickname = "nodesIdGet", notes = "Получить информацию об элементе по идентификатору. При получении информации о категории также предоставляется информация о её дочерних элементах.  - для пустой категории поле children равно пустому массиву, а для товара равно null - цена категории - это средняя цена всех её товаров, включая товары дочерних категорий. Если категория не содержит товаров цена равна null. При обновлении цены товара, средняя цена категории, которая содержит этот товар, тоже обновляется. ", response = ShopUnit.class, tags = {"Базовые задачи",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Информация об элементе.", response = ShopUnit.class),
            @ApiResponse(code = 400, message = "Невалидная схема документа или входные данные не верны.", response = Error.class),
            @ApiResponse(code = 404, message = "Категория/товар не найден.", response = Error.class)})
    @GetMapping(
            value = "/{id}",
            produces = {"application/json"}
    )
    public ResponseEntity<Object> getNodesById(@ApiParam(value = "Идентификатор элемента", required = true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(nodesService.getNodesById(id), HttpStatus.OK);

    }

}
